import os
import json
import asyncio
import logging
from dotenv import load_dotenv

from shapely.geometry import shape
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, FSInputFile,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web

from . import states
from .services import geocoding, osm, dem, metrics, pdf, map_render
from .storage.cache import ensure_dirs

load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PORT = int(os.getenv("PORT", "8080"))
WEBAPP_URL = os.getenv("WEBAPP_URL", "").strip()

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)
ensure_dirs()

# ------------- UI -------------
def main_keyboard() -> InlineKeyboardMarkup:
    rows = []
    if WEBAPP_URL.startswith("https://"):
        rows.append([
            InlineKeyboardButton(text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL)),
            InlineKeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å GeoJSON/KML", callback_data="upload_help"),
        ])
    else:
        rows.append([InlineKeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å GeoJSON/KML", callback_data="upload_help")])
    rows.append([
        InlineKeyboardButton(text="üìç –¢–æ—á–∫–∞ + –ø–ª–æ—â–∞–¥—å", callback_data="point_area"),
        InlineKeyboardButton(text="üîé –ö–ù ‚Üí –∫–æ–Ω—Ç—É—Ä", callback_data="cadnum"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def location_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True, one_time_keyboard=True
    )

# ------------- Handlers -------------
@router.message(CommandStart())
@router.message(Command("help"))
async def cmd_start(m: types.Message):
    hint = "" if WEBAPP_URL.startswith("https://") else "–ö–Ω–æ–ø–∫–∞ –∫–∞—Ä—Ç—ã —Å–∫—Ä—ã—Ç–∞ ‚Äî –Ω—É–∂–µ–Ω HTTPS. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–¢–æ—á–∫–∞ + –ø–ª–æ—â–∞–¥—å¬ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ GeoJSON/KML."
    await m.answer(
        "–ì–µ–æ‚Äë—Å–∫–æ—Ä–∏–Ω–≥ —É—á–∞—Å—Ç–∫–æ–≤: —Ä–∏—Å—É–π—Ç–µ –ø–æ–ª–∏–≥–æ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ö–ù ‚Üí –∫–æ–Ω—Ç—É—Ä¬ª –≤ –∫–∞—Ä—Ç–µ. "
        "–ü–æ—Å—á–∏—Ç–∞–µ–º —É–∫–ª–æ–Ω, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Ä–∏—Å–∫–∏ –ø–æ–¥—Ç–æ–ø–ª–µ–Ω–∏—è, —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π PDF.\n" + hint,
        reply_markup=main_keyboard()
    )

@router.callback_query(F.data == "upload_help")
async def upload_help(c: types.CallbackQuery):
    await c.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª .geojson –∏–ª–∏ .kml –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç. –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ.")
    await c.answer()

# ---- Point + area
@router.callback_query(F.data == "point_area")
async def point_area_start(c: types.CallbackQuery, state: FSMContext):
    await state.set_state(states.PointArea.waiting_location)
    await c.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ¬´55.75, 37.61¬ª.",
        reply_markup=location_kb()
    )
    await c.answer()

@router.message(StateFilter(states.PointArea.waiting_location), F.location)
async def point_area_loc(m: types.Message, state: FSMContext):
    await state.update_data(lat=m.location.latitude, lon=m.location.longitude)
    await state.set_state(states.PointArea.waiting_area)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ —Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).", reply_markup=ReplyKeyboardRemove())

@router.message(StateFilter(states.PointArea.waiting_location))
async def point_area_loc_text(m: types.Message, state: FSMContext):
    try:
        txt = m.text.replace(";", ",").replace("|", ",")
        lat, lon = [float(x.strip()) for x in txt.split(",")[:2]]
        await state.update_data(lat=lat, lon=lon)
        await state.set_state(states.PointArea.waiting_area)
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ —Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).", reply_markup=ReplyKeyboardRemove())
    except Exception:
        await m.answer("–§–æ—Ä–º–∞—Ç: ¬´55.75, 37.61¬ª –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π.", reply_markup=location_kb())

@router.message(StateFilter(states.PointArea.waiting_area))
async def point_area_area(m: types.Message, state: FSMContext):
    try:
        area_sot = float(m.text.replace(",", "."))
        data = await state.get_data()
        lat, lon = data["lat"], data["lon"]
        poly = metrics.square_from_point_area(lat, lon, area_sot)
        await state.clear()
        await run_pipeline_and_reply(m, poly, source="point+area")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /start")
        await state.clear()

# ---- –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä (–ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebApp)
@router.callback_query(F.data == "cadnum")
async def cadnum_hint(c: types.CallbackQuery):
    await c.message.answer("–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ä—Ç—É (–∫–Ω–æ–ø–∫–∞ —Å–≤–µ—Ä—Ö—É) ‚Üí –≤–≤–µ–¥–∏—Ç–µ –ö–ù ‚Üí ¬´–ö–ù ‚Üí –∫–æ–Ω—Ç—É—Ä¬ª, –∑–∞—Ç–µ–º ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª.")
    await c.answer()

# ---- –î–æ–∫—É–º–µ–Ω—Ç —Å GeoJSON/KML
@router.message(F.document)
async def doc_handler(m: types.Message):
    doc = m.document
    dest_dir = "cache/uploads"; os.makedirs(dest_dir, exist_ok=True)
    filename = f"{doc.file_id}_{doc.file_name or 'upload'}"
    path = os.path.join(dest_dir, filename)
    try:
        await bot.download(doc, destination=path)
        poly = metrics.read_polygon_from_file(path)
        await run_pipeline_and_reply(m, poly, source=os.path.basename(path))
    except Exception as e:
        await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏–∑ —Ñ–∞–π–ª–∞: {e}")

# ---- WebApp: web_app_data (–µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–∏—Ç)
@router.message(F.content_type == types.ContentType.WEB_APP_DATA)
async def webapp_data_ct(m: types.Message):
    try:
        payload = json.loads(m.web_app_data.data)
        if payload.get("type") == "Feature" and "geometry" in payload:
            g = shape(payload["geometry"])
            props = payload.get("properties", {}) or {}
        elif payload.get("type") in ("Polygon", "MultiPolygon"):
            g = shape(payload); props = {}
        else:
            raise ValueError("–û–∂–∏–¥–∞–ª—Å—è GeoJSON Feature/Polygon")

        cad = (props.get("cad_num") or "").strip()
        src = (props.get("source") or "webapp").strip()

        packed = props.get("legal")
        legal = None
        if packed:
            legal = {
                "–í–∏–¥ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏": packed.get("t"),
                "–í–∏–¥ –∑–µ–º–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞": packed.get("s"),
                "–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —É—á—ë—Ç": packed.get("d"),
                "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä": packed.get("cn"),
                "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª": packed.get("q"),
                "–ê–¥—Ä–µ—Å": packed.get("a"),
                "–ü–ª–æ—â–∞–¥—å —É—Ç–æ—á–Ω–µ–Ω–Ω–∞—è": packed.get("pu"),
                "–ü–ª–æ—â–∞–¥—å –¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è": packed.get("pd"),
                "–ü–ª–æ—â–∞–¥—å –ø–æ –∑–∞–ø–∏—Å–∏": packed.get("lra"),
                "–°—Ç–∞—Ç—É—Å": packed.get("st"),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å": packed.get("cat"),
                "–í–∏–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": packed.get("vri"),
                "–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏": packed.get("own"),
                "–¢–∏–ø –ø—Ä–∞–≤–∞": packed.get("rt"),
                "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å": packed.get("cost"),
                "–£–¥–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏": packed.get("cidx"),
                "–î–∞—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ö–°": packed.get("c_app"),
                "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ö–°": packed.get("c_reg"),
                "–î–∞—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ö–°": packed.get("c_det"),
                "–û—Å–Ω–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ö–°": packed.get("c_base"),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–±–æ—Ä–∞": packed.get("catn"),
                "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏": packed.get("upd"),
            }
        src_label = f"–ö–ù {cad} ‚Ä¢ {src}" if cad else src
        await run_pipeline_and_reply(m, g, source=src_label, legal=legal)
    except Exception as e:
        logging.exception("WEB_APP_DATA error")
        from html import escape
        await m.answer(f"–û—à–∏–±–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö: {escape(str(e))}", parse_mode=None)

# ------------- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ NSPD -------------
@router.message(Command("nspd_test"))
async def nspd_test(m: types.Message):
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ NSPD (–±—ç–∫–µ–Ω–¥).
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /nspd_test 81:04:0510001:46
    –í–∞–∂–Ω–æ: –Ω–∞ Replit —ç—Ç–æ—Ç –ø—É—Ç—å –º–æ–∂–µ—Ç —Ç–∞–π–º–∞—É—Ç–∏—Ç—å—Å—è ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å —á–µ—Ä–µ–∑ WebApp.
    """
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /nspd_test <–ö–ù>")
        return
    cad = parts[1].strip()
    await m.answer("NSPD: –ø—Ä–æ–±—É—é –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç—É—Ä‚Ä¶")
    try:
        from .providers.nspd import get_geometry_and_meta_by_cadnum_nspd
        geom, meta = await asyncio.to_thread(get_geometry_and_meta_by_cadnum_nspd, cad)
        attrs = meta.get("attrs") or {}
        await m.answer(
            "OK: NSPD (—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç—É—Ä)\n"
            f"Bounds: {geom.bounds}\n"
            f"–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {attrs.get('–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä')}\n"
            f"–ê–¥—Ä–µ—Å: {attrs.get('–ê–¥—Ä–µ—Å')}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å: {attrs.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å')}\n"
            f"–í–†–ò: {attrs.get('–í–∏–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')}\n"
            f"–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {attrs.get('–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å')}"
        )
    except Exception as e:
        from html import escape
        await m.answer("NSPD –æ—à–∏–±–∫–∞: " + escape(str(e)), parse_mode=None)

# ------------- Pipeline -------------
def _legal_brief(legal: dict | None) -> str:
    if not legal: return ""
    def g(k): return legal.get(k) or "‚Äî"
    return (
        "–°–ø—Ä–∞–≤–∫–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞:\n"
        f"- –í–∏–¥ –æ–±—ä–µ–∫—Ç–∞: {g('–í–∏–¥ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')}\n"
        f"- –í–†–ò: {g('–í–∏–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')}\n"
        f"- –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å: {g('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å')}\n"
        f"- –¢–∏–ø –ø—Ä–∞–≤–∞: {g('–¢–∏–ø –ø—Ä–∞–≤–∞')}\n"
        f"- –ü–ª–æ—â–∞–¥—å (–¥–µ–∫–ª.): {g('–ü–ª–æ—â–∞–¥—å –¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è')}\n"
        f"- –ü–ª–æ—â–∞–¥—å –ø–æ –∑–∞–ø–∏—Å–∏: {g('–ü–ª–æ—â–∞–¥—å –ø–æ –∑–∞–ø–∏—Å–∏')}\n"
        f"- –ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {g('–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å')}\n"
        f"- –î–∞—Ç—ã –ö–°: –ø—Ä–∏–º–µ–Ω. {g('–î–∞—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ö–°')}, —Ä–µ–≥. {g('–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ö–°')}, –æ–ø—Ä–µ–¥. {g('–î–∞—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ö–°')}\n"
        f"- –û—Å–Ω–æ–≤–∞–Ω–∏–µ –ö–°: {g('–û—Å–Ω–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ö–°')}\n"
        f"- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {g('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏')}"
    )

async def run_pipeline_and_reply(m: types.Message, geom_wgs84, source: str = "", legal: dict | None = None):
    from html import escape
    try:
        await m.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–æ–∫‚Ä¶ —ç—Ç–æ –∑–∞–π–º—ë—Ç ~5‚Äì20 —Å–µ–∫—É–Ω–¥.")
        centroid = geom_wgs84.centroid
        addr = await asyncio.to_thread(geocoding.reverse_geocode, centroid.y, centroid.x)

        # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ Nominatim, –µ—Å–ª–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if legal is not None:
            if not legal.get("–ê–¥—Ä–µ—Å") or legal.get("–ê–¥—Ä–µ—Å") in ("‚Äî", "-"):
                if isinstance(addr, dict) and addr.get("display_name"):
                    legal["–ê–¥—Ä–µ—Å"] = addr["display_name"]

        bbox = metrics.expand_bbox(geom_wgs84.bounds, meters=2000)
        osm_data = await asyncio.to_thread(osm.fetch_overpass, bbox)
        dem_stats = await asyncio.to_thread(dem.compute_dem_stats, geom_wgs84)
        metric_set = await asyncio.to_thread(metrics.compute_all, geom_wgs84, osm_data, dem_stats)
        map_path = await asyncio.to_thread(map_render.render_static_map, geom_wgs84, osm_data, "cache/maps")
        pdf_path = await asyncio.to_thread(pdf.render_report, metric_set, addr, source, map_path, legal)

        caption = metrics.format_brief(metric_set, addr)
        await m.answer_photo(photo=FSInputFile(map_path), caption=caption)

        explain = metrics.format_explain(metric_set)
        await m.answer(explain, parse_mode=None)

        lb = _legal_brief(legal)
        if lb:
            await m.answer(lb, parse_mode=None)

        if pdf_path and os.path.exists(pdf_path):
            await m.answer_document(document=FSInputFile(pdf_path))
    except Exception as e:
        logging.exception("run_pipeline_and_reply failed")
        await m.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: " + escape(str(e)), parse_mode=None)

# ------------- AIOHTTP web server (POST /api/webapp) -------------
async def process_and_send_with_legal(chat_id: int, geom_wgs84, source: str, legal: dict | None):
    from html import escape
    try:
        await bot.send_message(chat_id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–æ–∫‚Ä¶ —ç—Ç–æ –∑–∞–π–º—ë—Ç ~5‚Äì20 —Å–µ–∫—É–Ω–¥.")
        centroid = geom_wgs84.centroid
        addr = await asyncio.to_thread(geocoding.reverse_geocode, centroid.y, centroid.x)
        bbox = metrics.expand_bbox(geom_wgs84.bounds, meters=2000)
        osm_data = await asyncio.to_thread(osm.fetch_overpass, bbox)
        dem_stats = await asyncio.to_thread(dem.compute_dem_stats, geom_wgs84)
        metric_set = await asyncio.to_thread(metrics.compute_all, geom_wgs84, osm_data, dem_stats)
        map_path = await asyncio.to_thread(map_render.render_static_map, geom_wgs84, osm_data, "cache/maps")
        pdf_path = await asyncio.to_thread(pdf.render_report, metric_set, addr, source, map_path, legal)

        caption = metrics.format_brief(metric_set, addr)
        await bot.send_photo(chat_id, FSInputFile(map_path), caption=caption)
        await bot.send_message(chat_id, metrics.format_explain(metric_set), parse_mode=None)

        lb = _legal_brief(legal)
        if lb:
            await bot.send_message(chat_id, lb, parse_mode=None)

        if pdf_path and os.path.exists(pdf_path):
            await bot.send_document(chat_id, FSInputFile(pdf_path))
    except Exception as e:
        logging.exception("process_and_send_with_legal failed")
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: " + escape(str(e)), parse_mode=None)

async def api_webapp(request: web.Request):
    try:
        body = await request.json()
        feat = body.get("feature") or body
        user_id = int(body.get("user_id") or 0)
        if not user_id:
            return web.json_response({"ok": False, "error": "no user_id"}, status=400)

        g = shape(feat["geometry"]) if feat.get("type") == "Feature" else shape(feat)
        props = feat.get("properties") or {}
        cad = props.get("cad_num") or ""
        src = props.get("source") or "webapp"
        src_label = f"–ö–ù {cad} ‚Ä¢ {src}" if cad else src

        packed = props.get("legal")
        legal = None
        if packed:
            legal = {
                "–í–∏–¥ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏": packed.get("t"),
                "–í–∏–¥ –∑–µ–º–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞": packed.get("s"),
                "–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —É—á—ë—Ç": packed.get("d"),
                "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä": packed.get("cn"),
                "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –∫–≤–∞—Ä—Ç–∞–ª": packed.get("q"),
                "–ê–¥—Ä–µ—Å": packed.get("a"),
                "–ü–ª–æ—â–∞–¥—å —É—Ç–æ—á–Ω–µ–Ω–Ω–∞—è": packed.get("pu"),
                "–ü–ª–æ—â–∞–¥—å –¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è": packed.get("pd"),
                "–ü–ª–æ—â–∞–¥—å –ø–æ –∑–∞–ø–∏—Å–∏": packed.get("lra"),
                "–°—Ç–∞—Ç—É—Å": packed.get("st"),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å": packed.get("cat"),
                "–í–∏–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": packed.get("vri"),
                "–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏": packed.get("own"),
                "–¢–∏–ø –ø—Ä–∞–≤–∞": packed.get("rt"),
                "–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å": packed.get("cost"),
                "–£–¥–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏": packed.get("cidx"),
                "–î–∞—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ö–°": packed.get("c_app"),
                "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ö–°": packed.get("c_reg"),
                "–î–∞—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ö–°": packed.get("c_det"),
                "–û—Å–Ω–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ö–°": packed.get("c_base"),
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–±–æ—Ä–∞": packed.get("catn"),
                "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏": packed.get("upd"),
            }

        asyncio.create_task(process_and_send_with_legal(user_id, g, src_label, legal))
        return web.json_response({"ok": True})
    except Exception as e:
        logging.exception("api_webapp error")
        return web.json_response({"ok": False, "error": str(e)}, status=500)

async def start_web():
    app = web.Application()
    async def index(request): return web.FileResponse(path="webapp/index.html")
    app.router.add_get("/", index)
    app.router.add_static("/", path="webapp", show_index=False)
    app.router.add_get("/health", lambda request: web.Response(text="ok"))
    app.router.add_post("/api/webapp", api_webapp)
    runner = web.AppRunner(app); await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT); await site.start()
    logging.info(f"Web server started on port {PORT}; WebApp: {WEBAPP_URL or '(set WEBAPP_URL)'}")

@router.message(Command("debug"))
async def debug(m: types.Message):
    wa = getattr(m, "web_app_data", None)
    await m.answer(f"WEBAPP_URL={WEBAPP_URL}\nhas web_app_data? {'yes' if wa else 'no'}")

async def main():
    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω")
    await start_web()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())